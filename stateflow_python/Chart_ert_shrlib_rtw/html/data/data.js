var dataJson = {"arch":{"ispc":false,"isunix":true,"ismac":true},"build":"AB/Chart","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"/Users/proto/Library/CloudStorage/Dropbox/HSD_Nextcloud/Lehrveranstaltungen/Sommersemester/Modellbildung_Simulation/github/modellbildung_simulation/stateflow_python/Chart_ert_shrlib_rtw","tag":"","groupDisplay":"Main file","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: ert_main.c\n *\n * Code generated for Simulink model 'Chart'.\n *\n * Model version                  : 1.4\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\n * C/C++ source code generated on : Fri May 24 21:02:48 2024\n *\n * Target selection: ert_shrlib.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Emulation hardware selection:\n *    Differs from embedded hardware (MATLAB Host)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#include <stddef.h>\n#include <stdio.h>            /* This example main program uses printf/fflush */\n#include \"Chart.h\"                     /* Model header file */\n\n/*\n * Associating rt_OneStep with a real-time clock or interrupt service routine\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\n * always associated with the base rate of the model.  Subrates are managed\n * by the base rate from inside the generated code.  Enabling/disabling\n * interrupts and floating point context switches are target specific.  This\n * example code indicates where these should take place relative to executing\n * the generated code step function.  Overrun behavior should be tailored to\n * your application needs.  This example simply sets an error status in the\n * real-time model and returns from rt_OneStep.\n */\nvoid rt_OneStep(void);\nvoid rt_OneStep(void)\n{\n  static boolean_T OverrunFlag = false;\n\n  /* Disable interrupts here */\n\n  /* Check for overrun */\n  if (OverrunFlag) {\n    rtmSetErrorStatus(Chart_M, \"Overrun\");\n    return;\n  }\n\n  OverrunFlag = true;\n\n  /* Save FPU context here (if necessary) */\n  /* Re-enable timer or interrupt here */\n  /* Set model inputs here */\n\n  /* Step the model */\n  Chart_step();\n\n  /* Get model outputs here */\n\n  /* Indicate task complete */\n  OverrunFlag = false;\n\n  /* Disable interrupts here */\n  /* Restore FPU context here (if necessary) */\n  /* Enable interrupts here */\n}\n\n/*\n * The example main function illustrates what is required by your\n * application code to initialize, execute, and terminate the generated code.\n * Attaching rt_OneStep to a real-time clock is target specific. This example\n * illustrates how you do this relative to initializing the model.\n */\nint_T main(int_T argc, const char *argv[])\n{\n  /* Unused arguments */\n  (void)(argc);\n  (void)(argv);\n\n  /* Initialize model */\n  Chart_initialize();\n\n  /* Attach rt_OneStep to a timer or interrupt service routine with\n   * period 0.2 seconds (base rate of the model) here.\n   * The call syntax for rt_OneStep is\n   *\n   *  rt_OneStep();\n   */\n  printf(\"Warning: The simulation will run forever. \"\n         \"Generated ERT main won't simulate model step behavior. \"\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\n  fflush((NULL));\n  while (rtmGetErrorStatus(Chart_M) == (NULL)) {\n    /*  Perform application tasks here */\n  }\n\n  /* Terminate model */\n  Chart_terminate();\n  return 0;\n}\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"Chart.c","type":"source","group":"model","path":"/Users/proto/Library/CloudStorage/Dropbox/HSD_Nextcloud/Lehrveranstaltungen/Sommersemester/Modellbildung_Simulation/github/modellbildung_simulation/stateflow_python/Chart_ert_shrlib_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: Chart.c\n *\n * Code generated for Simulink model 'Chart'.\n *\n * Model version                  : 1.4\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\n * C/C++ source code generated on : Fri May 24 21:02:48 2024\n *\n * Target selection: ert_shrlib.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Emulation hardware selection:\n *    Differs from embedded hardware (MATLAB Host)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#include \"Chart.h\"\n#include \"rtwtypes.h\"\n\n/* Named constants for Chart: '<Root>/Chart' */\n#define Chart_IN_A                     ((uint8_T)1U)\n#define Chart_IN_B                     ((uint8_T)2U)\n\n/* Block states (default storage) */\nDW_Chart_T Chart_DW;\n\n/* External inputs (root inport signals with default storage) */\nExtU_Chart_T Chart_U;\n\n/* External outputs (root outports fed by signals with default storage) */\nExtY_Chart_T Chart_Y;\n\n/* Real-time model */\nstatic RT_MODEL_Chart_T Chart_M_;\nRT_MODEL_Chart_T *const Chart_M = &Chart_M_;\n\n/* Model step function */\nvoid Chart_step(void)\n{\n  /* Chart: '<Root>/Chart' incorporates:\n   *  Inport: '<Root>/inA'\n   *  Inport: '<Root>/inB'\n   */\n  /* Gateway: Chart */\n  /* During: Chart */\n  if (Chart_DW.is_active_c3_Chart == 0U) {\n    /* Entry: Chart */\n    Chart_DW.is_active_c3_Chart = 1U;\n\n    /* Entry Internal: Chart */\n    /* Transition: '<S1>:2' */\n    Chart_DW.is_c3_Chart = Chart_IN_A;\n\n    /* Outport: '<Root>/out' */\n    /* Entry 'A': '<S1>:1' */\n    Chart_Y.out = true;\n  } else if (Chart_DW.is_c3_Chart == Chart_IN_A) {\n    /* During 'A': '<S1>:1' */\n    if (Chart_U.inB) {\n      /* Transition: '<S1>:4' */\n      Chart_DW.is_c3_Chart = Chart_IN_B;\n\n      /* Outport: '<Root>/out' */\n      /* Entry 'B': '<S1>:3' */\n      Chart_Y.out = false;\n    } else {\n      /* Outport: '<Root>/out' */\n      Chart_Y.out = true;\n    }\n\n    /* During 'B': '<S1>:3' */\n  } else if (Chart_U.inA) {\n    /* Transition: '<S1>:5' */\n    Chart_DW.is_c3_Chart = Chart_IN_A;\n\n    /* Outport: '<Root>/out' */\n    /* Entry 'A': '<S1>:1' */\n    Chart_Y.out = true;\n  } else {\n    /* Outport: '<Root>/out' */\n    Chart_Y.out = false;\n  }\n\n  /* End of Chart: '<Root>/Chart' */\n}\n\n/* Model initialize function */\nvoid Chart_initialize(void)\n{\n  /* (no initialization code required) */\n}\n\n/* Model terminate function */\nvoid Chart_terminate(void)\n{\n  /* (no terminate code required) */\n}\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"Chart.h","type":"header","group":"model","path":"/Users/proto/Library/CloudStorage/Dropbox/HSD_Nextcloud/Lehrveranstaltungen/Sommersemester/Modellbildung_Simulation/github/modellbildung_simulation/stateflow_python/Chart_ert_shrlib_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: Chart.h\n *\n * Code generated for Simulink model 'Chart'.\n *\n * Model version                  : 1.4\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\n * C/C++ source code generated on : Fri May 24 21:02:48 2024\n *\n * Target selection: ert_shrlib.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Emulation hardware selection:\n *    Differs from embedded hardware (MATLAB Host)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_Chart_h_\n#define RTW_HEADER_Chart_h_\n#ifndef Chart_COMMON_INCLUDES_\n#define Chart_COMMON_INCLUDES_\n#include \"rtwtypes.h\"\n#endif                                 /* Chart_COMMON_INCLUDES_ */\n\n#include \"Chart_types.h\"\n\n/* Macros for accessing real-time model data structure */\n#ifndef rtmGetErrorStatus\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\n#endif\n\n#ifndef rtmSetErrorStatus\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\n#endif\n\n/* Block states (default storage) for system '<Root>' */\ntypedef struct {\n  uint8_T is_active_c3_Chart;          /* '<Root>/Chart' */\n  uint8_T is_c3_Chart;                 /* '<Root>/Chart' */\n} DW_Chart_T;\n\n/* External inputs (root inport signals with default storage) */\ntypedef struct {\n  boolean_T inA;                       /* '<Root>/inA' */\n  boolean_T inB;                       /* '<Root>/inB' */\n} ExtU_Chart_T;\n\n/* External outputs (root outports fed by signals with default storage) */\ntypedef struct {\n  boolean_T out;                       /* '<Root>/out' */\n} ExtY_Chart_T;\n\n/* Real-time Model Data Structure */\nstruct tag_RTM_Chart_T {\n  const char_T * volatile errorStatus;\n};\n\n/* Block states (default storage) */\nextern DW_Chart_T Chart_DW;\n\n/* External inputs (root inport signals with default storage) */\nextern ExtU_Chart_T Chart_U;\n\n/* External outputs (root outports fed by signals with default storage) */\nextern ExtY_Chart_T Chart_Y;\n\n/* Model entry point functions */\nextern void Chart_initialize(void);\nextern void Chart_step(void);\nextern void Chart_terminate(void);\n\n/* Real-time Model object */\nextern RT_MODEL_Chart_T *const Chart_M;\n\n/*-\n * The generated code includes comments that allow you to trace directly\n * back to the appropriate location in the model.  The basic format\n * is <system>/block_name, where system is the system number (uniquely\n * assigned by Simulink) and block_name is the name of the block.\n *\n * Note that this particular code originates from a subsystem build,\n * and has its own system numbers different from the parent model.\n * Refer to the system hierarchy for this subsystem below, and use the\n * MATLAB hilite_system command to trace the generated code back\n * to the parent model.  For example,\n *\n * hilite_system('AB/Chart')    - opens subsystem AB/Chart\n * hilite_system('AB/Chart/Kp') - opens and selects block Kp\n *\n * Here is the system hierarchy for this model\n *\n * '<Root>' : 'AB'\n * '<S1>'   : 'AB/Chart'\n */\n#endif                                 /* RTW_HEADER_Chart_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"Chart_private.h","type":"header","group":"model","path":"/Users/proto/Library/CloudStorage/Dropbox/HSD_Nextcloud/Lehrveranstaltungen/Sommersemester/Modellbildung_Simulation/github/modellbildung_simulation/stateflow_python/Chart_ert_shrlib_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: Chart_private.h\n *\n * Code generated for Simulink model 'Chart'.\n *\n * Model version                  : 1.4\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\n * C/C++ source code generated on : Fri May 24 21:02:48 2024\n *\n * Target selection: ert_shrlib.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Emulation hardware selection:\n *    Differs from embedded hardware (MATLAB Host)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_Chart_private_h_\n#define RTW_HEADER_Chart_private_h_\n#include \"rtwtypes.h\"\n#include \"Chart_types.h\"\n#endif                                 /* RTW_HEADER_Chart_private_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"Chart_types.h","type":"header","group":"model","path":"/Users/proto/Library/CloudStorage/Dropbox/HSD_Nextcloud/Lehrveranstaltungen/Sommersemester/Modellbildung_Simulation/github/modellbildung_simulation/stateflow_python/Chart_ert_shrlib_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: Chart_types.h\n *\n * Code generated for Simulink model 'Chart'.\n *\n * Model version                  : 1.4\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\n * C/C++ source code generated on : Fri May 24 21:02:48 2024\n *\n * Target selection: ert_shrlib.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Emulation hardware selection:\n *    Differs from embedded hardware (MATLAB Host)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_Chart_types_h_\n#define RTW_HEADER_Chart_types_h_\n\n/* Forward declaration for rtModel */\ntypedef struct tag_RTM_Chart_T RT_MODEL_Chart_T;\n\n#endif                                 /* RTW_HEADER_Chart_types_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"/Users/proto/Library/CloudStorage/Dropbox/HSD_Nextcloud/Lehrveranstaltungen/Sommersemester/Modellbildung_Simulation/github/modellbildung_simulation/stateflow_python/Chart_ert_shrlib_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: rtwtypes.h\n *\n * Code generated for Simulink model 'Chart'.\n *\n * Model version                  : 1.4\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\n * C/C++ source code generated on : Fri May 24 21:02:48 2024\n *\n * Target selection: ert_shrlib.tlc\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Emulation hardware selection:\n *    Differs from embedded hardware (MATLAB Host)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTWTYPES_H\n#define RTWTYPES_H\n\n/* Logical type definitions */\n#if (!defined(__cplusplus))\n#ifndef false\n#define false                          (0U)\n#endif\n\n#ifndef true\n#define true                           (1U)\n#endif\n#endif\n\n/*=======================================================================*\n * Target hardware information\n *   Device type: MATLAB Host\n *   Number of bits:     char:   8    short:   16    int:  32\n *                       long:  64    long long:  64\n *                       native word size:  64\n *   Byte ordering: LittleEndian\n *   Signed integer division rounds to: Zero\n *   Shift right on a signed integer as arithmetic shift: on\n *=======================================================================*/\n\n/*=======================================================================*\n * Fixed width word size data types:                                     *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\n *=======================================================================*/\ntypedef signed char int8_T;\ntypedef unsigned char uint8_T;\ntypedef short int16_T;\ntypedef unsigned short uint16_T;\ntypedef int int32_T;\ntypedef unsigned int uint32_T;\ntypedef long int64_T;\ntypedef unsigned long uint64_T;\ntypedef float real32_T;\ntypedef double real64_T;\n\n/*===========================================================================*\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\n *===========================================================================*/\ntypedef double real_T;\ntypedef double time_T;\ntypedef unsigned char boolean_T;\ntypedef int int_T;\ntypedef unsigned int uint_T;\ntypedef unsigned long ulong_T;\ntypedef unsigned long long ulonglong_T;\ntypedef char char_T;\ntypedef unsigned char uchar_T;\ntypedef char_T byte_T;\n\n/*===========================================================================*\n * Complex number type definitions                                           *\n *===========================================================================*/\n#define CREAL_T\n\ntypedef struct {\n  real32_T re;\n  real32_T im;\n} creal32_T;\n\ntypedef struct {\n  real64_T re;\n  real64_T im;\n} creal64_T;\n\ntypedef struct {\n  real_T re;\n  real_T im;\n} creal_T;\n\n#define CINT8_T\n\ntypedef struct {\n  int8_T re;\n  int8_T im;\n} cint8_T;\n\n#define CUINT8_T\n\ntypedef struct {\n  uint8_T re;\n  uint8_T im;\n} cuint8_T;\n\n#define CINT16_T\n\ntypedef struct {\n  int16_T re;\n  int16_T im;\n} cint16_T;\n\n#define CUINT16_T\n\ntypedef struct {\n  uint16_T re;\n  uint16_T im;\n} cuint16_T;\n\n#define CINT32_T\n\ntypedef struct {\n  int32_T re;\n  int32_T im;\n} cint32_T;\n\n#define CUINT32_T\n\ntypedef struct {\n  uint32_T re;\n  uint32_T im;\n} cuint32_T;\n\n#define CINT64_T\n\ntypedef struct {\n  int64_T re;\n  int64_T im;\n} cint64_T;\n\n#define CUINT64_T\n\ntypedef struct {\n  uint64_T re;\n  uint64_T im;\n} cuint64_T;\n\n/*=======================================================================*\n * Min and Max:                                                          *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *=======================================================================*/\n#define MAX_int8_T                     ((int8_T)(127))\n#define MIN_int8_T                     ((int8_T)(-128))\n#define MAX_uint8_T                    ((uint8_T)(255U))\n#define MAX_int16_T                    ((int16_T)(32767))\n#define MIN_int16_T                    ((int16_T)(-32768))\n#define MAX_uint16_T                   ((uint16_T)(65535U))\n#define MAX_int32_T                    ((int32_T)(2147483647))\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\n#define MAX_int64_T                    ((int64_T)(9223372036854775807L))\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807L-1L))\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFUL))\n\n/* Block D-Work pointer type */\ntypedef void * pointer_T;\n\n#endif                                 /* RTWTYPES_H */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};